name: FastAPI CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  dependencies:
    name: Dependency Management
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies with pip
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Dependencies with Pipenv
        run: |
          pip install pipenv
          pipenv install --deploy --ignore-pipfile

      - name: Install Dependencies with Poetry
        run: |
          pip install poetry
          poetry install --no-root --no-dev

      - name: Verify Installed Packages
        run: |
          pip list
          pipenv graph
          poetry show

  lint:
    name: Lint & Static Code Analysis
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Linters
        run: |
          pip install black flake8 mypy

      - name: Run Linters
        run: |
          black --check .
          flake8 .
          mypy .

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Security Tools
        run: |
          pip install safety bandit

      - name: Run Security Checks
        run: |
          safety check
          bandit -r .

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: dependencies
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Run Tests
        run: pytest --disable-warnings

  contract:
    name: API Contract Testing
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Contract Testing Tools
        run: |
          pip install schemathesis

      - name: Run Contract Tests
        run: |
          schemathesis run http://localhost:8000/openapi.json

  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Performance Tools
        run: |
          pip install locust

      - name: Run Load Tests
        run: |
          locust --headless -f load_test.py --host=http://localhost:8000

  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [lint, security, test, contract, performance]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          docker build -t my-fastapi-app .

      - name: Push to Google Cloud Run
        run: |
          gcloud auth configure-docker
          docker tag my-fastapi-app gcr.io/my-project/my-fastapi-app
          docker push gcr.io/my-project/my-fastapi-app

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy my-fastapi-app --image gcr.io/my-project/my-fastapi-app --platform managed --region us-central1
